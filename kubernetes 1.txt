Kubernetes Setup:

Types of Kubernetes Clusters.

  1) Self Managed Kubernetes Cluster.
  
     minikube --> Using minikube We can set up single node k8's Cluster.
	 Kubeadm  --> We can setup multi node k8's cluster.
	 
  
  2) Cloud Managed Services(PAAS).
    
    EKS --> Elastic Kuberetes Service --> AWS
    AKS --> Azure Kubernetes Service --> Azure
    GKE --> Google Kubernetes Engine --> Google Cloud

    KOPS --> Kubernetes Operations using which we can setup k8s in AWS.


Name Spaces

kubectl get namespaces

kubectl create namespace <nameSpaceName>

ex:

kubectl create flipkartapp


Kubernetes Objects:

POD

Replication Controller

Replica Set

DaemonSet

Deployment

Service

Volume


# POD Manifest

apiVersion: v1
kind: Pod
metadata:
  name: <PodName>
  labels:
    <Key>: <value>
  namespace: <nameSpaceName>
spec:
  containers:
  - name: <NameOfTheCotnainer>
    image: <imagaName>
	ports:
	- containerPort: <portOfContainer>
	
Example:
apiVersion: v1
kind: Pod
metadata:
  name: javawebapppod
  labels:
    app: javawebapp	
spec:
  containers:
  - name: javawebappcontainer
    image: dockerhandson/java-web-app
    ports:
    - containerPort: 8080


kubectl apply -f <fileName.yml>

kubectl get all -n <namespace>
kubectl get pods -n <namespace>
kubectl get pods -n <namespace> - o wide


Note: If we don't mention -n <namespace> it will refer default namespace.
If required we can change name space context.

kubctl config set-context --curent --namespace=<namespace>
ex:
kubectl config set-context --curent --namespace=flipkart

After setting context if by default it will point to that namespace.


# Multi Container POD
apiVersion: v1
kind: Pod
metadata:
  name:  <PODName>
  namespace: <nameSpaceName>
  labels:
    <labelKey>: <labelValue> 
spec:
  containers:
  - name: <nameOftheCotnainer>
    image: <imageName>
	ports:
	- containerPort: <portNumberOfContainer>
  - name: <nameOftheCotnainer>
    image: <imageName>
    ports:
    - containerPort: <portNumberOfContainer>	
	
Service
========
apiVersion: v1
kind: Service
metadata:
  name: <serviceName>
  namespace: <nameSpace>
spec:
  type: <ClusterIP/NodePort>
  selector:
     <key>: <value>
  ports:
  - port: <servciePort>	# default It to 80
    targetPort: <containerPort> 

With in Cluster ClusterIP
==========================
apiVersion: v1
kind: Service
metadata:
  name: javawebappservice
spec:
  type: ClusterIP
  selector:
     app: javawebapp
  ports:
  - port: 80
    targetPort: 8080

Out side of Cluster Node Port
====================
apiVersion: v1
kind: Service
metadata:
  name: javawebappservice
spec:
  type: NodePort
  selector:
     app: javawebapp
  ports:
  - port: 80
    targetPort: 8080
	nodePort: 30033 # This Optional if u don't mention nodePort.Kuberetes will assign.
	

kubectl apply -f <file.yml>

kubectl get svc 
kubectl get svc -n <namespace>
kubectl get all
	

What is node port range?
30000-32767



# Replication Conrtoller
apiVersion: v1
kind: ReplicationController
metadata:
  name: <replicationControllerName>
  namespace: <nameSpaceName>
spec:
  replicas: <noOfReplicas>
  selector:
    <key>: <value>
  template: # POD Template
    metadata:
	  name: <PODName>
	  labels:
	    <key>: <value>
	spec:
	- containers:
	  - name: <nameOfTheContainer>
	    image: <imageName>
		ports:
		- containerPort: <containerPort>
  	
Example:
========
apiVersion: v1
kind: ReplicationController
metadata:
  name: javawebapprc
spec:
  replicas: 1
  selector:
    app: javawebapp
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: javawebappcontainer
        image: dockerhandson/java-web-app
        ports:
        - containerPort: 8080

kubectl apply -f <filename.yml>
kubectl get rc 
kubectl get rc -n <namespace>
kubectl get all
kubectl scale rc <rcName> --replicas <noOfReplicas>

kubectl describe rc <rcName>
kubectl delete rc <rcName>


ReplicaSet:

What is difference b/w replicaset and replication controller?

It's next gernation of replication controller. Both manages the pod replicas. But only difference as now is
selector support.

RC Supports only equality based selector.
Key = Vaule
RS Supports equality bases and also set based selector.

Set Basesd:
key in (Value1,Values)
Key not ins (Value1,value2)


# Mainfest File RS

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: <RSName>
spec:
  replicas: <noOfPODReplicas>
  selector:  # To Match POD Labels.
    matchLabels:  # Equality Based Selector
	  <key>: <value>
    matchExpressions:  # Set Based Selector 
	- key: <key>
	  operator: <in/not in>
	  values:
	  - <value1>
	  - <value2>
  template:
    metadata:
	  name: <PODName>
	  labels:
	    <key>: <value>
	spec:
	- containers:
	  - name: <nameOfTheContainer>
	    image: <imageName>
		ports:
		- containerPort: <containerPort>


Example:

apiVersion: apps/v1
kind: ReplicaSet
metadata: 
  name: javawebapprs
spec: 
  replicas: 1
  selector: 
    matchLabels: 
      app: javawebapp
  template: 
    metadata: 
	  name: javawebapppod
      labels: 
        app: javawebapp
    spec: 
      containers: 
      - image: dockerhandson/java-web-app:1
        name: javawebappcontainer
        ports: 
        - containerPort: 8080


What is difference b/w kubectl create and kubectl apply ?

Create will Create an Object if it's not already created. Apply will perfrom create if object is not created earlier.If it's already
created it will update.




apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: <RSName>
spec:
  selector:  # To Match POD Labels.
    matchLabels:  # Equality Based Selector
	  <key>: <value>
    matchExpressions:  # Set Based Selector 
	- key: <key>
	  operator: <in/not in>
	  values:
	  - <value1>
	  - <value2>
  template:
    metadata:
	  name: <PODName>
	  labels:
	    <key>: <value>
	spec:
	- containers:
	  - name: <nameOfTheContainer>
	    image: <imageName>
		ports:
		- containerPort: <containerPort>


apiVersion: apps/v1
kind: DaemonSet
metadata: 
  name: javawebappds
spec: 
  selector: 
    matchLabels: 
      app: javawebapp
  template: 
    metadata: 
	  name: javawebapppod
      labels: 
        app: javawebapp
    spec: 
      containers: 
      - image: dockerhandson/java-web-app:1
        name: javawebappcontainer
        ports: 
        - containerPort: 8080
		

#Deployment Example  with Recreate
apiVersion: apps/v1
kind: Deployment
metadata:
  name: javawebappdeployment
spec:
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: javawebapp
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: javawebappcontainer
        image: dockerhandson/java-web-app:1
        ports:
        - containerPort: 8080	
	   	  	  

Commands
=============

kubectl get deployment  
kubectl rollout status deployment <deploymentName>
kubectl scale deployment <deploymentName> --replicas <deploymentName>
# To display deployment history
kubectl rollout history deployment <deploymentName>


# Update Image for the deployment
kubectl set image deployment <deploymentName> <containerName>=<imageNameWithVersion> --record 

EX:
kubectl set image deployment javawebappdeployment javawebappcontainer=dockerhandson/java-web-app:2 --record 

# To display deployment pod template of a given revision
kubectl rollout history deployment <deploymentName> --revison=<revisonNumber>

# Roll back (undo deployment)
kubectl rollout undo deployment <deploymentName> --to-revison=<revisonNumber>
Ex: 
kubectl rollout undo deployment javawebappdeployment --to-revison=1

What is the default deployment strategy?
Rolling Update

# Rolling Update Manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: javawebappdeployment
spec:
  replicas: 2
  selector:
    matchLabels:        
      app: javawebapp
  strategy:
    type: RollingUpdate
    rollingUpdate:
       maxSurge: 1
       maxUnavailable: 1
  minReadySeconds: 30
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: javawebappcontainer
        image: dockerhandson/java-web-app:2
        ports:
        - containerPort: 8080 


Volumes:

Kubernetes Supports different types of volumes.

hostPath
nfs

awsElasticBlockStore
googlePersistantdisk
azureFile
azuredisk

persistantVolume
persistantVolumeClaim


		
# Spring App & Mongo		
apiVersion: v1
kind: ReplicationController
metadata:
  name: springapprc
spec:
  replicas: 2
  selector:
    app: springapp
  template:
    metadata:
      name: springapppod 
      labels:
        app: springapp
    spec: 
      containers:
      - name: springappcontainer
        image: dockerhandson/spring-boot-mongo
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: springappservice
spec:
  type: NodePort
  selector:
     app: springapp
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: mongorc
spec:
  selector:
    app: mongo
  template:
    metadata:
      name: mongopod
      labels:
        app: mongo
    spec:
      volumes:
      - name: mongohostpath
        hostPath:
          path: /tmp/mongobkp      
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongohostpath
          mountPath: /data/db  
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017		